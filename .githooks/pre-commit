#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

# Define the required commit message structure
commit_format="^(feat|fix|docs|style|refactor|test|chore)\(([a-zA-Z]+)\): (.+)$"

echo "Commit message:'$(git log -n 1 --pretty=format:'%s')'"
# Check if the commit message matches the required format
if ! git log -n 1 --pretty=format:'%s' | grep -q "$commit_format"; then
  echo "Error: Commit message does not match the required format."
  echo "The commit message should follow this structure:"
  echo ""
  echo "- [type](#Type): what type of change this commit contains."
  echo "- [scope](#Scope): what item of code this commit is changing."
  echo "- [subject](#Subject): a short description of the changes."
  echo "- [body](#Body)(optional): a more in-depth description of the changes"
  echo ""
  echo "Example:"
  echo "feat(ruler): add inches as well as centimeters"
  echo ""
  echo "Please update your commit message and try again."
  exit 1
fi

# Check if any line in the commit message is longer than 100 characters
if git log --oneline -1 | grep -q '.\{101,\}'; then
  echo "Error: One or more lines in the commit message are longer than 100 characters."
  echo "Please make sure all lines in the commit message are 100 characters or less."
  exit 1
fi